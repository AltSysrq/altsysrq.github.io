(function() {var implementors = {};
implementors["proptest"] = [{"text":"impl&lt;S:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for UniformArrayStrategy&lt;S, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ArrayValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for BitSetStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for SampledBitSetStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for BitSetValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for Weighted","synthetic":false,"types":[]},{"text":"impl Clone for BoolValueTree","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CharStrategy&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CharValueTree","synthetic":false,"types":[]},{"text":"impl Clone for SizeRange","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Strategy&gt; Clone for VecStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for VecDequeStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for VecDequeValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LinkedListStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LinkedListValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BinaryHeapStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BinaryHeapValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HashSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HashSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BTreeSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BTreeSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for HashMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for HashMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for BTreeMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for BTreeMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + ValueTree&gt; Clone for VecValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Filter&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for FilterMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone + ValueTree, F:&nbsp;Fn(V::Value) -&gt; Option&lt;O&gt;, O&gt; Clone for FilterMapValueTree&lt;V, F, O&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Flatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;ValueTree&gt; Clone for FlattenValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Value: Strategy + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S::Value as Strategy&gt;::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for IndFlatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for IndFlattenMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Fuse&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for Just&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;Clone + Fn() -&gt; T&gt; Clone for LazyJust&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Strategy&gt; Clone for LazyValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Map&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, O&gt; Clone for MapInto&lt;S, O&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Perturb&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for PerturbValueTree&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Clone for Recursive&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Shuffle&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for ShuffleValueTree&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for NoShrink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for BoxedStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for SBoxedStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CheckStrategySanityOptions","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Strategy&gt; Clone for Union&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy&gt; Clone for UnionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleUnion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleUnionValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Filter&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for TestCaseError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TestError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FileFailurePersistence","synthetic":false,"types":[]},{"text":"impl Clone for MapFailurePersistence","synthetic":false,"types":[]},{"text":"impl Clone for PersistedSeed","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn FailurePersistence&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Reason","synthetic":false,"types":[]},{"text":"impl Clone for RngAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for TestRng","synthetic":false,"types":[]},{"text":"impl Clone for TestRunner","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Probability","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OptionStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy&gt; Clone for OptionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for MaybeOk&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for MaybeErr&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy, E:&nbsp;Strategy&gt; Clone for MaybeOkValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy, E:&nbsp;Strategy&gt; Clone for MaybeErrValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + 'static&gt; Clone for Subsequence&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + 'static&gt; Clone for SubsequenceValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Select&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Debug + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SelectValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Debug + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for IndexStrategy","synthetic":false,"types":[]},{"text":"impl Clone for IndexValueTree","synthetic":false,"types":[]},{"text":"impl Clone for Selector","synthetic":false,"types":[]},{"text":"impl Clone for StringParam","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()