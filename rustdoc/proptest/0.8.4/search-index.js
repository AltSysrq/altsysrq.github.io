var searchIndex = {};
searchIndex["proptest"] = {"doc":"Proptest is a property testing framework (i.e., the QuickCheck family) inspired by the Hypothesis framework for Python. It allows to test that certain properties of your code hold for arbitrary inputs, and if a failure is found, automatically finds the minimal test case to reproduce the problem. Unlike QuickCheck, generation and shrinking is defined on a per-value basis instead of per-type, which makes it more flexible and simplifies composition.","items":[[0,"arbitrary","proptest","Defines the [`Arbitrary`] trait and related free functions and type aliases. See the trait for more information.",null,null],[5,"any","proptest::arbitrary","Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[],"output":{"name":"strategyfor"}}],[5,"any_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Unlike [`arbitrary_with`], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[{"name":"paramsfor"}],"output":{"name":"strategyfor"}}],[5,"arbitrary","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A`. Works better with type inference than [`any::<A>()`].",null,{"inputs":[],"output":{"name":"s"}}],[5,"arbitrary_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Works better with type inference than [`any_with::<A>(args)`].",null,{"inputs":[{"name":"p"}],"output":{"name":"s"}}],[0,"functor","","Provides higher order `Arbitrary` traits. This is mainly for use by `proptest_derive`.",null,null],[8,"ArbitraryF1","proptest::arbitrary::functor","`ArbitraryF1` lets you lift a [`Strategy`] to unary type constructors such as `Box`, `Vec`, and `Option`.",null,null],[16,"Parameters","","The type of parameters that [`lift1_with`] accepts for configuration of the lifted and generated [`Strategy`]. Parameters must implement [`Default`].",0,null],[11,"lift1","","Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `SomeType` to a container such as `Vec<SomeType>`.",0,{"inputs":[{"name":"as"}],"output":{"name":"boxedstrategy"}}],[10,"lift1_with","","Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `SomeType` to a container such as `Vec` of `SomeType`. The composite strategy is passed the arguments given in `args`.",0,null],[8,"ArbitraryF2","","`ArbitraryF2` lets you lift [`Strategy`] to binary type constructors such as `Result`, `HashMap`.",null,null],[16,"Parameters","","The type of parameters that [`lift2_with`] accepts for configuration of the lifted and generated [`Strategy`]. Parameters must implement [`Default`].",1,null],[11,"lift2","","Lifts two given strategies to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `Type1` and one for `Type2` to a container such as `HashMap<Type1, Type2>`.",1,{"inputs":[{"name":"as"},{"name":"bs"}],"output":{"name":"boxedstrategy"}}],[10,"lift2_with","","Lifts two given strategies to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `Type1` and one for `Type2` to a container such as `HashMap<Type1, Type2>`. The composite strategy is passed the arguments given in `args`.",1,null],[6,"StrategyFor","proptest::arbitrary","`StrategyFor` allows you to mention the type of [`Strategy`] for the input type `A` without directly using associated types or without resorting to existential types. This way, if implementation of [`Arbitrary`] changes, your tests should not break. This can be especially beneficial when the type of `Strategy` that you are dealing with is very long in name (the case with generics).",null,null],[6,"ParamsFor","","`ParamsFor` allows you to mention the type of [`Parameters`] for the input type `A` without directly using associated types or without resorting to existential types. This way, if implementation of [`Arbitrary`] changes, your tests should not break.",null,null],[6,"SMapped","","A static map from a strategy of `I` to `O`.",null,null],[6,"Mapped","","A normal map from a strategy of `I` to `O`.",null,null],[8,"Arbitrary","","Arbitrary determines a canonical [`Strategy`] for the implementing type.",null,null],[16,"Parameters","","The type of parameters that [`arbitrary_with`] accepts for configuration of the generated [`Strategy`]. Parameters must implement [`Default`].",2,null],[11,"arbitrary","","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[10,"arbitrary_with","","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`). The strategy is passed the arguments given in args.",2,null],[16,"Strategy","","The type of [`Strategy`] used to generate values of type `Self`.",2,null],[0,"array","proptest","Support for strategies producing fixed-length arrays.",null,null],[3,"UniformArrayStrategy","proptest::array","A `Strategy` which generates fixed-size arrays containing values drawn from an inner strategy.",null,null],[3,"ArrayValueTree","","A `ValueTree` operating over a fixed-size array.",null,null],[5,"uniform1","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform2","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform3","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform4","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform5","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform6","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform7","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform8","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform9","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform10","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform11","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform12","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform13","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform14","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform15","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform16","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform17","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform18","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform19","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform20","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform21","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform22","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform23","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform24","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform25","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform26","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform27","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform28","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform29","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform30","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform31","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform32","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uniformarraystrategy"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly create a `UniformArrayStrategy`.",3,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"arrayvaluetree"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bits","proptest","Strategies for working with bit sets.",null,null],[3,"BitSetStrategy","proptest::bits","Generates values as a set of bits between the two bounds.",null,null],[3,"SampledBitSetStrategy","","Generates bit sets with a particular number of bits set.",null,null],[3,"BitSetValueTree","","Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.",null,null],[0,"u8","","",null,null],[5,"between","proptest::bits::u8","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u8"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u8"}],"output":{"generics":["u8"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u16","proptest::bits","",null,null],[5,"between","proptest::bits::u16","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u16"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u16"}],"output":{"generics":["u16"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u32","proptest::bits","",null,null],[5,"between","proptest::bits::u32","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u32"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["u32"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u64","proptest::bits","",null,null],[5,"between","proptest::bits::u64","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u64"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u64"}],"output":{"generics":["u64"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i8","proptest::bits","",null,null],[5,"between","proptest::bits::i8","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i8"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i8"}],"output":{"generics":["i8"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i16","proptest::bits","",null,null],[5,"between","proptest::bits::i16","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i16"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i16"}],"output":{"generics":["i16"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i32","proptest::bits","",null,null],[5,"between","proptest::bits::i32","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i32"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i32"}],"output":{"generics":["i32"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i64","proptest::bits","",null,null],[5,"between","proptest::bits::i64","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i64"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i64"}],"output":{"generics":["i64"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"usize","proptest::bits","",null,null],[5,"between","proptest::bits::usize","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"usize"}],"output":{"generics":["usize"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[0,"isize","proptest::bits","",null,null],[5,"between","proptest::bits::isize","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["isize"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"isize"}],"output":{"generics":["isize"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[0,"bitset","proptest::bits","",null,null],[5,"between","proptest::bits::bitset","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["bitset"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"bitset"}],"output":{"generics":["bitset"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[0,"bool_vec","proptest::bits","",null,null],[5,"between","proptest::bits::bool_vec","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["vec"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"generics":["bool"],"name":"vec"}],"output":{"generics":["vec"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[8,"BitSetLike","proptest::bits","Trait for types which can be handled with `BitSetStrategy`.",null,null],[10,"new_bitset","","Create a new value of `Self` with space for up to `max` bits, all initialised to zero.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"len","","Return an upper bound on the greatest bit set plus one.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"test","","Test whether the given bit is set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the given bit.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"clear","","Clear the given bit.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"count","","Return the number of bits set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitsetstrategy"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which generates values where bits between `min` (inclusive) and `max` (exclusive) may be set.",6,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"masked","","Create a strategy which generates values where any bits set (and only those bits) in `mask` may be set.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",6,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sampledbitsetstrategy"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",7,null],[11,"new_tree","","",7,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bitsetvaluetree"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bool","proptest","Strategies for generating `bool` values.",null,null],[3,"Any","proptest::bool","The type of the `ANY` constant.",null,null],[3,"Weighted","","The return type from `weighted()`.",null,null],[3,"BoolValueTree","","The `ValueTree` to shrink booleans to false.",null,null],[5,"weighted","","Generates boolean values by picking `true` with the given `probability` (1.0 = always true, 0.0 = always false).",null,{"inputs":[{"name":"f64"}],"output":{"name":"weighted"}}],[17,"ANY","","Generates boolean values by picking `true` or `false` uniformly.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",9,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",10,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"boolvaluetree"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simplify","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"char","proptest","Strategies for generating `char` values.",null,null],[3,"CharStrategy","proptest::char","Strategy for generating `char`s.",null,null],[3,"CharValueTree","","The `ValueTree` corresponding to `CharStrategy`.",null,null],[5,"select_char","","Selects a random character the way `CharStrategy` does.",null,null],[5,"any","","Creates a `CharStrategy` which picks from literally any character, with the default biases.",null,{"inputs":[],"output":{"name":"charstrategy"}}],[5,"range","","Creates a `CharStrategy` which selects characters within the given endpoints, inclusive, using the default biases.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"charstrategy"}}],[5,"ranges","","Creates a `CharStrategy` which selects characters within the given ranges, all inclusive, using the default biases.",null,{"inputs":[{"name":"cow"}],"output":{"name":"charstrategy"}}],[17,"DEFAULT_SPECIAL_CHARS","","A default set of characters to consider as \"special\" during character generation.",null,null],[17,"DEFAULT_PREFERRED_RANGES","","A default sequence of ranges used preferentially when generating random characters.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"charstrategy"}}],[11,"new","","Construct a new `CharStrategy` with the parameters it will pass to the function underlying `select_char()`.",12,{"inputs":[{"name":"cow"},{"name":"cow"},{"name":"cow"}],"output":{"name":"self"}}],[11,"new_borrowed","","Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"charvaluetree"}}],[11,"new_tree","","",12,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",13,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"simplify","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"collection","proptest","Strategies for generating `std::collections` of values.",null,null],[3,"SizeRange","proptest::collection","The minimum and maximum range/bounds on the size of a collection. The interval must form a subset of `[0, std::usize::MAX]`.",null,null],[3,"VecStrategy","","Strategy to create `Vec`s with a length in a certain range.",null,null],[3,"VecDequeStrategy","","Strategy to create `VecDeque`s with a length in a certain range.",null,null],[3,"VecDequeValueTree","","`ValueTree` corresponding to `VecDequeStrategy`.",null,null],[3,"LinkedListStrategy","","Strategy to create `LinkedList`s with a length in a certain range.",null,null],[3,"LinkedListValueTree","","`ValueTree` corresponding to `LinkedListStrategy`.",null,null],[3,"BinaryHeapStrategy","","Strategy to create `BinaryHeap`s with a length in a certain range.",null,null],[3,"BinaryHeapValueTree","","`ValueTree` corresponding to `BinaryHeapStrategy`.",null,null],[3,"HashSetStrategy","","Strategy to create `HashSet`s with a length in a certain range.",null,null],[3,"HashSetValueTree","","`ValueTree` corresponding to `HashSetStrategy`.",null,null],[3,"BTreeSetStrategy","","Strategy to create `BTreeSet`s with a length in a certain range.",null,null],[3,"BTreeSetValueTree","","`ValueTree` corresponding to `BTreeSetStrategy`.",null,null],[3,"HashMapStrategy","","Strategy to create `HashMap`s with a length in a certain range.",null,null],[3,"HashMapValueTree","","`ValueTree` corresponding to `HashMapStrategy`.",null,null],[3,"BTreeMapStrategy","","Strategy to create `BTreeMap`s with a length in a certain range.",null,null],[3,"BTreeMapValueTree","","`ValueTree` corresponding to `BTreeMapStrategy`.",null,null],[3,"VecValueTree","","`ValueTree` corresponding to `VecStrategy`.",null,null],[5,"size_range","","Creates a `SizeRange` from some value that is convertible into it.",null,null],[5,"vec","","Create a strategy to generate `Vec`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"vec_deque","","Create a strategy to generate `VecDeque`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"linked_list","","Create a strategy to generate `LinkedList`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"binary_heap","","Create a strategy to generate `BinaryHeap`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"hash_set","","Create a strategy to generate `HashSet`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"btree_set","","Create a strategy to generate `BTreeSet`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"hash_map","","Create a strategy to generate `HashMap`s containing keys and values drawn from `key` and `value` respectively, and with a size within the given range.",null,null],[5,"btree_map","","Create a strategy to generate `BTreeMap`s containing keys and values drawn from `key` and `value` respectively, and with a size within the given range.",null,null],[11,"default","","Constructs a `SizeRange` equivalent to `size_range(0..100)`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a `SizeBounds` from a `RangeInclusive<usize>`.",14,{"inputs":[{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"self"}}],[11,"with","","Merges self together with some other argument producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",14,null],[11,"lift","","Merges self together with some other argument generated with a default value producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",14,null],[11,"from","","",14,null],[11,"from","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"self"}}],[11,"add","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sizerange"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"sizerange"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"sizerange"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vecstrategy"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vecdequestrategy"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vecdequevaluetree"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",16,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",17,null],[11,"simplify","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linkedliststrategy"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"linkedlistvaluetree"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",18,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",19,null],[11,"simplify","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"binaryheapstrategy"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"binaryheapvaluetree"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",20,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",21,null],[11,"simplify","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"hashsetstrategy"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hashsetvaluetree"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",22,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",23,null],[11,"simplify","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"btreesetstrategy"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"btreesetvaluetree"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",24,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",25,null],[11,"simplify","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"hashmapstrategy"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hashmapvaluetree"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",26,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",27,null],[11,"simplify","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"btreemapstrategy"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"btreemapvaluetree"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",28,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",29,null],[11,"simplify","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vecvaluetree"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",15,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"simplify","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"num","proptest","Strategies to generate numeric values (as opposed to integers used as bit fields).",null,null],[0,"i8","proptest::num","",null,null],[3,"Any","proptest::num::i8","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",31,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",32,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"current","","",32,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"simplify","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i16","proptest::num","",null,null],[3,"Any","proptest::num::i16","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",33,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",34,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"current","","",34,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"simplify","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i32","proptest::num","",null,null],[3,"Any","proptest::num::i32","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",35,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",36,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"current","","",36,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"simplify","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i64","proptest::num","",null,null],[3,"Any","proptest::num::i64","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",37,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",38,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"current","","",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"simplify","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i128","proptest::num","",null,null],[3,"Any","proptest::num::i128","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",39,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",40,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"current","","",40,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"simplify","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"isize","proptest::num","",null,null],[3,"Any","proptest::num::isize","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",41,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",42,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"current","","",42,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"simplify","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u8","proptest::num","",null,null],[3,"Any","proptest::num::u8","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",43,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",44,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",44,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"current","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"simplify","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u16","proptest::num","",null,null],[3,"Any","proptest::num::u16","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",45,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",46,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",46,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"current","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"simplify","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u32","proptest::num","",null,null],[3,"Any","proptest::num::u32","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",47,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",48,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",48,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"current","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"simplify","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u64","proptest::num","",null,null],[3,"Any","proptest::num::u64","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",49,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",50,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",50,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"current","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"simplify","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u128","proptest::num","",null,null],[3,"Any","proptest::num::u128","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",51,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",52,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",52,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"self"}}],[11,"current","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"simplify","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"usize","proptest::num","",null,null],[3,"Any","proptest::num::usize","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",53,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",54,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"current","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"simplify","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"f32","proptest::num","",null,null],[3,"Any","proptest::num::f32","Strategies which produce floating-point values from particular classes. See the various `Any`-typed constants in this module.",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find boundary points.",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \"normal\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \"Quiet NaN\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \"Signaling NaN\" floats if allowed by the platform.",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, including infinities and quiet NaNs (but not signaling NaNs).",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"new_tree","","",55,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",56,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"current","","",56,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"simplify","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"f64","proptest::num","",null,null],[3,"Any","proptest::num::f64","Strategies which produce floating-point values from particular classes. See the various `Any`-typed constants in this module.",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find boundary points.",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \"normal\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \"Quiet NaN\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \"Signaling NaN\" floats if allowed by the platform.",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, including infinities and quiet NaNs (but not signaling NaNs).",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","","",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"new_tree","","",57,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",58,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"current","","",58,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"simplify","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"strategy","proptest","Defines the core traits used by Proptest.",null,null],[3,"NoShrink","proptest::strategy","Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated values.",null,null],[3,"BoxedStrategy","","A boxed `Strategy` trait object as produced by `Strategy::boxed()`.",null,null],[3,"SBoxedStrategy","","A boxed `Strategy` trait object which is also `Sync` and `Send`, as produced by `Strategy::sboxed()`.",null,null],[3,"CheckStrategySanityOptions","","Options passed to `check_strategy_sanity()`.",null,null],[12,"strict_complicate_after_simplify","","If true (the default), require that `complicate()` return `true` at least once after any call to `simplify()` which itself returns once.",59,null],[3,"Just","","A `Strategy` which always produces a single value value and never simplifies.",null,null],[12,"0","","The value produced by this strategy.",60,null],[3,"LazyJust","","A `Strategy` which always produces a single value value and never simplifies. If `T` is `Clone`, you should use `Just` instead.",null,null],[3,"Map","","`Strategy` and `ValueTree` map adaptor.",null,null],[3,"MapInto","","`Strategy` and `ValueTree` map into adaptor.",null,null],[3,"Perturb","","`Strategy` perturbation adaptor.",null,null],[3,"PerturbValueTree","","`ValueTree` perturbation adaptor.",null,null],[3,"Filter","","`Strategy` and `ValueTree` filter adaptor.",null,null],[3,"FilterMap","","`Strategy` and `ValueTree` filter_map adaptor.",null,null],[3,"FilterMapValueTree","","`ValueTree` corresponding to `FilterMap`.",null,null],[3,"Flatten","","Adaptor that flattens a `Strategy` which produces other `Strategy`s into a `Strategy` that picks one of those strategies and then picks values from it.",null,null],[3,"FlattenValueTree","","The `ValueTree` produced by `Flatten`.",null,null],[3,"IndFlatten","","Similar to `Flatten`, but does not shrink the input strategy.",null,null],[3,"IndFlattenMap","","Similar to `Map` plus `Flatten`, but does not shrink the input strategy and passes the original input through.",null,null],[3,"Union","","A `Strategy` which picks from one of several delegate `Stragegy`s.",null,null],[3,"UnionValueTree","","`ValueTree` corresponding to `Union`.",null,null],[3,"TupleUnion","","Similar to `Union`, but internally uses a tuple to hold the strategies.",null,null],[3,"TupleUnionValueTree","","`ValueTree` type produced by `TupleUnion`.",null,null],[3,"Recursive","","Return type from `Strategy::prop_recursive()`.",null,null],[3,"Shuffle","","`Strategy` shuffle adaptor.",null,null],[3,"ShuffleValueTree","","`ValueTree` shuffling adaptor.",null,null],[3,"Fuse","","Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and `complicate()` to avoid contract violations.",null,null],[5,"check_strategy_sanity","","Run some tests on the given `Strategy` to ensure that it upholds the simplify/complicate contracts.",null,{"inputs":[{"name":"s"},{"generics":["checkstrategysanityoptions"],"name":"option"}],"output":null}],[5,"float_to_weight","","Convert a floating-point weight in the range (0.0,1.0) to a pair of weights that can be used with `Union` and similar.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",61,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",61,null],[11,"simplify","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",62,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"boxed","","",62,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"new_tree","","",63,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"sboxed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"boxed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"checkstrategysanityoptions"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"just"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",60,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"simplify","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Constructs a `LazyJust` strategy given the function/closure that produces the value.",64,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"new_tree","","",64,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"simplify","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",65,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",65,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",66,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",66,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",67,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"current","","",68,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",69,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",69,null],[11,"simplify","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",70,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",71,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"new","","Wrap `source` to flatten it.",72,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"new_tree","","",72,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",73,null],[11,"simplify","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"indflatten"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",74,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",75,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which selects uniformly from the given delegate strategies.",76,null],[11,"new_weighted","","Create a strategy which selects from the given delegate strategies.",76,{"inputs":[{"generics":["w"],"name":"vec"}],"output":{"name":"self"}}],[11,"or","","Add `other` as an additional alternate strategy with weight 1.",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",76,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"unionvaluetree"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",77,null],[11,"simplify","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"tupleunion"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrap `tuple` in a `TupleUnion`.",78,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"tupleunionvaluetree"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",80,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",81,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"shufflevaluetree"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",82,null],[11,"simplify","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"new","","Wrap the given `T` in `Fuse`.",83,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",83,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"may_simplify","","Return whether a call to `simplify()` may be productive.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disallow_simplify","","Disallow any further calls to `simplify()` until a call to `complicate()` returns `true`.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"may_complicate","","Return whether a call to `complicate()` may be productive.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disallow_complicate","","Disallow any further calls to `complicate()` until a call to `simplify()` returns `true`.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"freeze","","Prevent any further shrinking operations from occurring.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"current","","",83,null],[11,"simplify","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"statics","","Modified versions of the normal strategy combinators which take specialised traits instead of normal functions.",null,null],[3,"Filter","proptest::strategy::statics","Static version of `strategy::Filter`.",null,null],[3,"Map","","Static version of `strategy::Map`.",null,null],[8,"FilterFn","","Essentially `Fn (&T) -> bool`.",null,null],[10,"apply","","Test whether `t` passes the filter.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"MapFn","","Essentially `Fn (T) -> Output`.",null,null],[16,"Output","","",85,null],[10,"apply","","Map `T` to `Output`.",85,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Adapt strategy `source` to reject values which do not pass `filter`, using `whence` as the reported reason/location.",86,{"inputs":[{"name":"s"},{"name":"reason"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",86,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",86,null],[11,"simplify","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"new","","Adapt strategy `source` by applying `fun` to values it produces.",87,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",87,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",87,null],[11,"simplify","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"NewTree","proptest::strategy","A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`] when a new value-tree can not be produced for some reason such as in the case of filtering with a predicate which always returns false. You should pass in your strategy as the type parameter.",null,null],[6,"ValueFor","","The value that functions under test use for a particular `Strategy`.",null,null],[6,"LazyJustFn","","Shorthand for `LazyJust<T, fn () -> T>`.",null,null],[6,"W","","A relative `weight` of a particular `Strategy` corresponding to `T` coupled with `T` itself. The weight is currently given in `u32`.",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this `Strategy`.",88,null],[16,"Value","","The type of value used by functions under test generated by this Strategy.",88,null],[10,"new_tree","","Generate a new value tree from the given runner.",88,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"prop_map","","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[8,"ValueTree","","A generated value and its associated shrinker.",null,null],[16,"Value","","The type of the value produced by this `ValueTree`.",89,null],[10,"current","","Returns the current value.",89,null],[10,"simplify","","Attempts to simplify the current value. Notionally, this sets the \"high\" value to the current value, and the current value to a \"halfway point\" between high and low, rounding towards low.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"complicate","","Attempts to partially undo the last simplification. Notionally, this sets the \"low\" value to one plus the current value, and the current value to a \"halfway point\" between high and the new low, rounding towards low.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Shuffleable","","A value which can be used with the `prop_shuffle` combinator.",null,null],[10,"shuffle_len","","Return the length of this collection.",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"shuffle_swap","","Swap the elements at the given indices.",90,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"test_runner","proptest","State and functions for running proptest tests.",null,null],[3,"TestRng","proptest::test_runner","Proptest's random number generator.",null,null],[3,"MapFailurePersistence","","Failure persistence option that loads and saves seeds in memory on the heap. This may be useful when accumulating test failures across multiple `TestRunner` instances for external reporting or batched persistence.",null,null],[12,"map","","Backing map, keyed by source_file.",91,null],[3,"Config","","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for the test as a whole to pass.",92,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_flat_map_regens","","The maximum number of times all `Flatten` combinators will attempt to regenerate values. This puts a limit on the worst-case exponential explosion that can happen with nested `Flatten`s.",92,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",92,null],[12,"source_file","","File location of the current test, relevant for persistence and debugging.",92,null],[12,"test_name","","The fully-qualified name of the test being run, as would be passed to the test executable to run just that test.",92,null],[12,"fork","","If true, tests are run in a subprocess.",92,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each generated case fails if it takes longer than this number of milliseconds.",92,null],[3,"Reason","","The reason for why something, such as a generated value, was rejected.",null,null],[3,"TestRunner","","State used when running a proptest test.",null,null],[4,"FileFailurePersistence","","Describes how failing test cases are persisted.",null,null],[13,"Off","","Completely disables persistence of failing test cases.",93,null],[13,"SourceParallel","","The path given to `TestRunner::set_source_file()` is parsed. The path is traversed up the directory tree until a directory containing a file named `lib.rs` or `main.rs` is found. A sibling to that directory with the name given by the string in this configuration is created, and a file with the same name and path relative to the source directory, but with the extension changed to `.txt`, is used.",93,null],[13,"WithSource","","The path given to `TestRunner::set_source_file()` is parsed. The extension of the path is changed to the string given in this configuration, and that filename is used.",93,null],[13,"Direct","","The string given in this option is directly used as a file path without any further processing.",93,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate non-successful completion.",null,null],[13,"Reject","","The input was not valid for the test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[13,"Fail","","The code under test failed the test.",94,null],[4,"TestError","","A failure state from running test cases for a single test.",null,null],[13,"Abort","","The test was aborted for the given reason, for example, due to too many inputs having been rejected.",95,null],[13,"Fail","","A failing test case was found. The string indicates where and/or why the test failed. The `T` is the minimal input found to reproduce the failure.",95,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",96,null],[11,"try_fill_bytes","","",96,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"filefailurepersistence"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"filefailurepersistence"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"filefailurepersistence"}],"output":{"name":"bool"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"load_persisted_failures","","",93,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[11,"save_persisted_failure","","",93,null],[11,"box_clone","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[11,"as_any","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"mapfailurepersistence"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"mapfailurepersistence"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"mapfailurepersistence"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"mapfailurepersistence"}],"output":{"name":"bool"}}],[11,"load_persisted_failures","","",91,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[11,"save_persisted_failure","","",91,null],[11,"box_clone","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"with_cases","","Constructs a `Config` only differing from the `default()` in the number of test cases required to pass the test successfully.",92,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"with_source_file","","Constructs a `Config` only differing from the `default()` in the source_file of the present test.",92,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone_with_source_file","","Constructs a `Config` only differing from the provided Config instance, `self`, in the source_file of the present test.",92,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"fork","","Return whether this configuration implies forking.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timeout","","Returns the configured timeout.",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"reason"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"message","","Return the message for this `Reason`.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",97,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"testcaseerror"}}],[11,"reject","","Rejects the generated test input as invalid for this test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[11,"fail","","The code under test failed the test.",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",94,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"testerror"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"testerror"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"testerror"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"testrunner"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a fresh `TestRunner` with the given configuration.",98,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"rng","","Returns the RNG for this test run.",98,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"new_rng","","Create a new, independent but deterministic RNG from the RNG in this runner.",98,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"config","","Returns the configuration of this runner.",98,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"run","","Run test cases against `f`, choosing inputs via `strategy`.",98,null],[11,"run_one","","Run one specific test case against this runner.",98,null],[11,"reject_local","","Update the state to account for a local rejection from `whence`, and return `Ok` if the caller should keep going or `Err` to abort.",98,null],[11,"flat_map_regen","","Increment the counter of flat map regenerations and return whether it is still under the configured limit.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"TestCaseResult","","Convenience for the type returned by test cases.",null,null],[8,"FailurePersistence","","Provides external persistence for historical test failures by storing seeds.",null,null],[10,"load_persisted_failures","","Supply seeds associated with the given `source_file` that may be used by a `TestRunner`'s random number generator in order to consistently recreate a previously-failing `Strategy`-provided value.",99,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[10,"save_persisted_failure","","Store a new failure-generating seed associated with the given `source_file`.",99,null],[10,"box_clone","","Delegate method for producing a trait object usable with `Clone`",99,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[10,"eq","","Equality testing delegate required due to constraints of trait objects.",99,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[10,"as_any","","Assistant method for trait object comparison.",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[0,"tuple","proptest","Support for combining strategies into tuples.",null,null],[3,"TupleValueTree","proptest::tuple","Common `ValueTree` implementation for all tuple strategies.",null,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"tuplevaluetree"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `TupleValueTree` wrapping `inner`.",100,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"option","proptest","Strategies for generating `std::Option` values.",null,null],[3,"Probability","proptest::option","A probability in the range `[0.0, 1.0]` with a default of `0.5`.",null,null],[3,"OptionStrategy","","Strategy which generates `Option` values whose inner `Some` values are generated by another strategy.",null,null],[3,"OptionValueTree","","`ValueTree` type corresponding to `OptionStrategy`.",null,null],[5,"prob","","Creates a `Probability` from some value that is convertible into it.",null,null],[5,"of","","Return a strategy producing `Optional` values wrapping values from the given delegate strategy.",null,{"inputs":[{"name":"t"}],"output":{"name":"optionstrategy"}}],[5,"weighted","","Return a strategy producing `Optional` values wrapping values from the given delegate strategy.",null,null],[11,"default","","The default probability is 0.5, or 50% chance.",101,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Creates a `Probability` from a `f64`.",101,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"new","","Creates a `Probability` from a `f64`.",101,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"with","","Merges self together with some other argument producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",101,null],[11,"lift","","Merges self together with some other argument generated with a default value producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"probability"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"probability"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"probability"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"optionstrategy"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"optionvaluetree"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",102,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",103,null],[11,"simplify","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"result","proptest","Strategies for combining delegate strategies into `std::Result`s.",null,null],[3,"MaybeOk","proptest::result","Strategy which generates `Result`s using `Ok` and `Err` values from two delegate strategies.",null,null],[3,"MaybeOkValueTree","","`ValueTree` type corresponding to `MaybeOk`.",null,null],[3,"MaybeErr","","Strategy which generates `Result`s using `Ok` and `Err` values from two delegate strategies.",null,null],[3,"MaybeErrValueTree","","`ValueTree` type corresponding to `MaybeErr`.",null,null],[5,"maybe_ok","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"maybeok"}}],[5,"maybe_ok_weighted","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,null],[5,"maybe_err","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"maybeerr"}}],[5,"maybe_err_weighted","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"maybeok"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"maybeokvaluetree"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",104,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",105,null],[11,"simplify","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"maybeerr"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"maybeerrvaluetree"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",106,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",107,null],[11,"simplify","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sample","proptest","Strategies for generating values by taking samples of collections.",null,null],[3,"Subsequence","proptest::sample","Strategy to generate `Vec`s by sampling a subsequence from another collection.",null,null],[3,"SubsequenceValueTree","","`ValueTree` type for `Subsequence`.",null,null],[3,"Select","","Strategy to produce one value from a fixed collection of options.",null,null],[3,"SelectValueTree","","`ValueTree` corresponding to `Select`.",null,null],[5,"subsequence","","Sample subsequences whose size are within `size` from the given collection `values`.",null,null],[5,"select","","Create a strategy which uniformly selects one value from `values`.",null,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"subsequence"}}],[11,"new_tree","","",108,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"subsequencevaluetree"}}],[11,"current","","",109,null],[11,"simplify","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"select"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"selectvaluetree"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",110,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",111,null],[11,"simplify","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"string","proptest","Strategies for generating strings and byte strings from regular expressions.",null,null],[3,"StringParam","proptest::string","Wraps the regex that forms the `Strategy` for `String` so that a sensible `Default` can be given. The default is a string of non-control characters.",null,null],[3,"RegexGeneratorStrategy","","Strategy which generates values (i.e., `String` or `Vec<u8>`) matching a regular expression.",null,null],[3,"RegexGeneratorValueTree","","`ValueTree` corresponding to `RegexGeneratorStrategy`.",null,null],[4,"Error","","Errors which may occur when preparing a regular expression for use with string generation.",null,null],[13,"RegexSyntax","","The string passed as the regex was not syntactically valid.",112,null],[13,"UnsupportedRegex","","The regex was syntactically valid, but contains elements not supported by proptest.",112,null],[5,"string_regex","","Creates a strategy which generates strings matching the given regular expression.",null,{"inputs":[{"name":"str"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"string_regex_parsed","","Like `string_regex()`, but allows providing a pre-parsed expression.",null,{"inputs":[{"name":"hir"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"bytes_regex","","Creates a strategy which generates byte strings matching the given regular expression.",null,{"inputs":[{"name":"str"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"bytes_regex_parsed","","Like `bytes_regex()`, but allows providing a pre-parsed expression.",null,{"inputs":[{"name":"hir"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",112,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"stringparam"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"ordering"}}],[11,"hash","","",113,null],[11,"from","","",113,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",114,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",115,null],[11,"simplify","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prelude","proptest","Re-exports the most commonly-needed APIs of proptest.",null,null],[8,"RngCore","proptest::prelude","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",116,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"next_u64","","Return the next random `u64`.",116,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",116,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",116,null],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",null,null],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",117,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"sample","","Sample a new value, using the given distribution.",117,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"t"}}],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",117,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"distiter"}}],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",117,null],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"gen_bool","","Return a bool with a probability `p` of being true.",117,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"choose","","Return a random element from `values`.",117,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",117,null],[11,"shuffle","","Shuffle a mutable slice in place.",117,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",117,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",117,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",117,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[3,"BoxedStrategy","","A boxed `Strategy` trait object as produced by `Strategy::boxed()`.",null,null],[3,"Just","","A `Strategy` which always produces a single value value and never simplifies.",null,null],[12,"0","","The value produced by this strategy.",60,null],[3,"SBoxedStrategy","","A boxed `Strategy` trait object which is also `Sync` and `Send`, as produced by `Strategy::sboxed()`.",null,null],[3,"ProptestConfig","","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for the test as a whole to pass.",92,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_flat_map_regens","","The maximum number of times all `Flatten` combinators will attempt to regenerate values. This puts a limit on the worst-case exponential explosion that can happen with nested `Flatten`s.",92,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",92,null],[12,"source_file","","File location of the current test, relevant for persistence and debugging.",92,null],[12,"test_name","","The fully-qualified name of the test being run, as would be passed to the test executable to run just that test.",92,null],[12,"fork","","If true, tests are run in a subprocess.",92,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each generated case fails if it takes longer than this number of milliseconds.",92,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate non-successful completion.",null,null],[13,"Reject","","The input was not valid for the test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[13,"Fail","","The code under test failed the test.",94,null],[5,"any","","Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[],"output":{"name":"strategyfor"}}],[5,"any_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Unlike [`arbitrary_with`], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[{"name":"paramsfor"}],"output":{"name":"strategyfor"}}],[0,"prop","","Re-exports the entire public API of proptest so that an import of `prelude` allows simply writing, for example, `prop::num::i32::ANY` rather than `proptest::num::i32::ANY` plus a separate `use proptest;`.",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this `Strategy`.",88,null],[16,"Value","","The type of value used by functions under test generated by this Strategy.",88,null],[10,"new_tree","","Generate a new value tree from the given runner.",88,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"prop_map","proptest::strategy","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[8,"Arbitrary","proptest::prelude","Arbitrary determines a canonical [`Strategy`] for the implementing type.",null,null],[16,"Parameters","","The type of parameters that [`arbitrary_with`] accepts for configuration of the generated [`Strategy`]. Parameters must implement [`Default`].",2,null],[11,"arbitrary","proptest::arbitrary","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[10,"arbitrary_with","proptest::prelude","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`). The strategy is passed the arguments given in args.",2,null],[16,"Strategy","","The type of [`Strategy`] used to generate values of type `Self`.",2,null],[14,"proptest","proptest","Easily define `proptest` tests.",null,null],[14,"prop_assume","","Rejects the test input if assumptions are not met.",null,null],[14,"prop_oneof","","Produce a strategy which picks one of the listed choices.",null,null],[14,"prop_compose","","Convenience to define functions which produce new strategies.",null,null],[14,"prop_assert","","Similar to `assert!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_assert_eq","","Similar to `assert_eq!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_assert_ne","","Similar to `assert_ne!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[11,"arbitrary","proptest::arbitrary","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[11,"arbitrary_with","proptest::option","",101,null],[11,"arbitrary_with","proptest::collection","",14,null],[11,"prop_map","proptest::strategy","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[11,"read","proptest::prelude","",116,null],[11,"eq","proptest::test_runner","",99,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}]],"paths":[[8,"ArbitraryF1"],[8,"ArbitraryF2"],[8,"Arbitrary"],[3,"UniformArrayStrategy"],[3,"ArrayValueTree"],[8,"BitSetLike"],[3,"BitSetStrategy"],[3,"SampledBitSetStrategy"],[3,"BitSetValueTree"],[3,"Any"],[3,"Weighted"],[3,"BoolValueTree"],[3,"CharStrategy"],[3,"CharValueTree"],[3,"SizeRange"],[3,"VecStrategy"],[3,"VecDequeStrategy"],[3,"VecDequeValueTree"],[3,"LinkedListStrategy"],[3,"LinkedListValueTree"],[3,"BinaryHeapStrategy"],[3,"BinaryHeapValueTree"],[3,"HashSetStrategy"],[3,"HashSetValueTree"],[3,"BTreeSetStrategy"],[3,"BTreeSetValueTree"],[3,"HashMapStrategy"],[3,"HashMapValueTree"],[3,"BTreeMapStrategy"],[3,"BTreeMapValueTree"],[3,"VecValueTree"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"CheckStrategySanityOptions"],[3,"Just"],[3,"NoShrink"],[3,"BoxedStrategy"],[3,"SBoxedStrategy"],[3,"LazyJust"],[3,"Map"],[3,"MapInto"],[3,"Perturb"],[3,"PerturbValueTree"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapValueTree"],[3,"Flatten"],[3,"FlattenValueTree"],[3,"IndFlatten"],[3,"IndFlattenMap"],[3,"Union"],[3,"UnionValueTree"],[3,"TupleUnion"],[3,"TupleUnionValueTree"],[3,"Recursive"],[3,"Shuffle"],[3,"ShuffleValueTree"],[3,"Fuse"],[8,"FilterFn"],[8,"MapFn"],[3,"Filter"],[3,"Map"],[8,"Strategy"],[8,"ValueTree"],[8,"Shuffleable"],[3,"MapFailurePersistence"],[3,"Config"],[4,"FileFailurePersistence"],[4,"TestCaseError"],[4,"TestError"],[3,"TestRng"],[3,"Reason"],[3,"TestRunner"],[8,"FailurePersistence"],[3,"TupleValueTree"],[3,"Probability"],[3,"OptionStrategy"],[3,"OptionValueTree"],[3,"MaybeOk"],[3,"MaybeOkValueTree"],[3,"MaybeErr"],[3,"MaybeErrValueTree"],[3,"Subsequence"],[3,"SubsequenceValueTree"],[3,"Select"],[3,"SelectValueTree"],[4,"Error"],[3,"StringParam"],[3,"RegexGeneratorStrategy"],[3,"RegexGeneratorValueTree"],[8,"RngCore"],[8,"Rng"]]};
initSearch(searchIndex);
